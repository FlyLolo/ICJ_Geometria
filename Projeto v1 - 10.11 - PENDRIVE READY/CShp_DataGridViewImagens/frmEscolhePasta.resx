<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>